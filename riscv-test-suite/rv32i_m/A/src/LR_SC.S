
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.11.1
// timestamp : Wed Jul 26 10:49:50 2023 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/user3/abd_ctg/riscv-ctg/sample_cgfs/dataset.cgf \
//                  --cgf /home/user3/abd_ctg/riscv-ctg/sample_cgfs/rv32ia.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the amoadd.w instruction of the RISC-V RV32A extension for the amoadd.w covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IA")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*A.*); def TEST_CASE_1=True;",LR_SC.w)

RVTEST_SIGBASE(x2,signature_x2_1)

la x1, rvtest_data

//Aligned LR/SC success & LR/SC Normal Order
addi x3, x0, 5
sw x3, (x1)
lr.w x4, (x1)
RVTEST_SIGUPD(x2, x4)
addi x3, x3, 5
sc.w x5, x3, (x1)
RVTEST_SIGUPD(x2, x5)

//Misaligned LR/SC
/*addi x3, x0, 5
sw x3, (x1)
addi x6, x1, 2
lr.w x4, (x6)
RVTEST_SIGUPD(x2, x4)
addi x3, x3, 5
sc.w x5, x3, (x6)
RVTEST_SIGUPD(x2, x5)*/

//SC Fails - Different Reservation Set
addi x3, x0, 5
sw x3, (x1)
lr.w x4, (x1)
RVTEST_SIGUPD(x2, x4)
addi x3, x3, 5
addi x6, x1, 4
sc.w x5, x3, (x6)
RVTEST_SIGUPD(x2, x5)


// SC Fails - Another SC in Program Order
addi x3, x0, 5
sw x3, (x1)
lr.w x4, (x1)
RVTEST_SIGUPD(x2, x4)
addi x3, x3, 5
addi x4, x1, 4

sc.w x5, x3, (x4)
RVTEST_SIGUPD(x2, x5)

sc.w x6, x3, (x1)
RVTEST_SIGUPD(x2, x5)


//Empty LR/SC sequence
addi x3, x0, 5
sw x3, (x1)
lr.w x4, (x1)

sc.w x5, x3, (x1)
RVTEST_SIGUPD(x2, x5)

//Constrained LR/SC sequence success
addi x3, x0, 5
addi x6, x0, 0
sw x3, (x1)
cas:
   beq x6, x3, fail
   lr.w x4, (x1)
   bne x4, x3, fail
   sc.w x5, x3, (x1)
   addi x6, x6, 1
   bnez x5, cas
   addi x10, x0, 0

fail:
    addi x10, x0,1
    
RVTEST_SIGUPD(x2, x5)

//Constrained LR/SC sequence Failure - Unsuccessful SC
addi x3, x0, 5
addi x6, x0, 0
sw x3, (x1)
cas1:
   beq x6, x3, fail1
   lr.w x4, (x1)
   bne x4, x3, fail1
   addi x4, x1, 4
   sc.w x5, x3, (x4)
   addi x6, x6, 1
   bnez x5, cas1
   addi x10, x0, 0

fail1:
    addi x10, x0,1
    
RVTEST_SIGUPD(x2, x5)

//Constrained LR/SC Loop - Max Instructions
// Number of instructions = 16
addi x3, x0, 5
addi x6, x0, 0
sw x3, (x1)
cas2:
   beq x6, x3, fail2
   lr.w x4, (x1)
   bne x4, x3, fail2
   addi x0, x0,0
   addi x0, x0,0
   addi x0, x0,0
   addi x0, x0,0
   addi x0, x0,0
   sc.w x5, x3, (x1)
   addi x6, x6, 1
   bnez x5, cas2
   addi x10, x0, 0

fail2:
    addi x10, x0,1
    
RVTEST_SIGUPD(x2, x5)

//Constrained LR/SC Loop > Max Instructions
// Number of instructions = 17
addi x3, x0, 5
addi x6, x0, 0
sw x3, (x1)
cas3:
   beq x6, x3, fail3
   lr.w x4, (x1)
   bne x4, x3, fail3
   addi x0, x0,0
   addi x0, x0,0
   addi x0, x0,0
   addi x0, x0,0
   addi x0, x0,0
   addi x0, x0,0
   sc.w x5, x3, (x1)
   addi x6, x6, 1
   bnez x5, cas3
   addi x10, x0, 0

fail3:
    addi x10, x0,1
    addi x0, x0,0
    addi x0, x0,0
    addi x0, x0,0
    
RVTEST_SIGUPD(x2, x5)

//Unconstrained LR/SC sequence - Another store between LR and SC
addi x3, x0, 5
sw x3, (x1)
lr.w x4, (x1)
addi x3, x3, 5
addi x4, x1, 4

sw x3, (x1)

sc.w x5, x3, (x1)
RVTEST_SIGUPD(x2, x5)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;



signature_x2_0:
    .fill 0*((XLEN/8)/4),4,0xdeadbeef


signature_x2_1:
    .fill 32*((XLEN/8)/4),4,0xdeadbeef


signature_x9_0:
    .fill 24*((XLEN/8)/4),4,0xdeadbeef


signature_x1_0:
    .fill 82*((XLEN/8)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine
tsig_begin_canary:
CANARY;

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

tsig_end_canary:
CANARY;
#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif


sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
